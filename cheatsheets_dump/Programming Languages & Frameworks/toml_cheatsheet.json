[
    {
        "parent_category": "TOML",
        "category": "TOML Basics",
        "title": "Basic Syntax & Data Types",
        "description": "The fundamental syntax of TOML, including its key-value structure, comments, and the main scalar data types.",
        "content": {
            "sections": [
                {
                    "section_title": "Core Syntax",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Key-Value Pairs & Comments",
                            "tags": [
                                "toml",
                                "syntax",
                                "key-value",
                                "comments"
                            ],
                            "language": "toml",
                            "code": "# TOML is a collection of key-value pairs.\n# Keys are on the left of the equals sign, values are on the right.\n# Comments start with a hash symbol.\n\nkey = \"value\" # This is an inline comment.",
                            "output": "{\n  \"key\": \"value\"\n}"
                        }
                    ]
                },
                {
                    "section_title": "Data Types",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Strings",
                            "tags": [
                                "toml",
                                "data types",
                                "string"
                            ],
                            "language": "toml",
                            "code": "# Basic strings are wrapped in double quotes.\nbasic_string = \"Hello, World!\"\n\n# Literal strings are wrapped in single quotes. They don't interpret escape characters.\nliteral_string = 'C:\\Users\\Path'\n\n# Multi-line strings are wrapped in three double quotes.\nmulti_line_string = \"\"\"\nThis is a\nmulti-line string.\n\"\"\"",
                            "output": "{\n  \"basic_string\": \"Hello, World!\",\n  \"literal_string\": \"C:\\\\Users\\\\Path\",\n  \"multi_line_string\": \"This is a\\nmulti-line string.\\n\"\n}"
                        },
                        {
                            "sub_section_heading": "Integer, Float, and Boolean",
                            "tags": [
                                "toml",
                                "data types",
                                "integer",
                                "float",
                                "boolean"
                            ],
                            "language": "toml",
                            "code": "integer_value = 123\nfloat_value = 45.67\nboolean_true = true\nboolean_false = false",
                            "output": "{\n  \"integer_value\": 123,\n  \"float_value\": 45.67,\n  \"boolean_true\": true,\n  \"boolean_false\": false\n}"
                        },
                        {
                            "sub_section_heading": "Datetime",
                            "tags": [
                                "toml",
                                "data types",
                                "datetime",
                                "date",
                                "time"
                            ],
                            "language": "toml",
                            "code": "# Datetimes are a first-class citizen in TOML, formatted as RFC 3339.\noffset_datetime = 1979-05-27T07:32:00-08:00\nlocal_datetime = 1979-05-27T15:32:00\nlocal_date = 1979-05-27\nlocal_time = 07:32:00",
                            "output": "{\n  \"offset_datetime\": \"1979-05-27T07:32:00-08:00\",\n  \"local_datetime\": \"1979-05-27T15:32:00\",\n  \"local_date\": \"1979-05-27\",\n  \"local_time\": \"07:32:00\"\n}"
                        }
                    ]
                }
            ]
        }
    },
    {
        "parent_category": "TOML",
        "category": "TOML Basics",
        "title": "Arrays & Tables",
        "description": "How to structure data using arrays (lists of values) and tables (groups of key-value pairs).",
        "content": {
            "sections": [
                {
                    "section_title": "Arrays",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Simple Arrays",
                            "tags": [
                                "toml",
                                "structure",
                                "array",
                                "list"
                            ],
                            "language": "toml",
                            "code": "# Arrays are lists of values enclosed in square brackets.\n# Values are separated by commas. They can be of mixed types.\n\nports = [ 8001, 8002, 8003 ]\ndata = [ \"delta\", 4, true ]",
                            "output": "{\n  \"ports\": [ 8001, 8002, 8003 ],\n  \"data\": [ \"delta\", 4, true ]\n}"
                        },
                        {
                            "sub_section_heading": "Multi-line Arrays",
                            "tags": [
                                "toml",
                                "array",
                                "multiline"
                            ],
                            "language": "toml",
                            "code": "# For readability, arrays can be written across multiple lines.\n# A trailing comma is permitted.\n\nhosts = [\n  \"alpha\",\n  \"omega\",\n]",
                            "output": "{\n  \"hosts\": [ \"alpha\", \"omega\" ]\n}"
                        }
                    ]
                },
                {
                    "section_title": "Tables (Dictionaries)",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Defining a Table",
                            "tags": [
                                "toml",
                                "structure",
                                "table",
                                "object",
                                "dictionary"
                            ],
                            "language": "toml",
                            "code": "# Tables (also called hashmaps or dictionaries) are collections of key-value pairs.\n# They are defined by a header in square brackets.\n# All keys and values following the header belong to that table until the next header.\n\n[database]\nhost = \"192.168.1.1\"\nport = 5432\nenabled = true",
                            "output": "{\n  \"database\": {\n    \"host\": \"192.168.1.1\",\n    \"port\": 5432,\n    \"enabled\": true\n  }\n}"
                        },
                        {
                            "sub_section_heading": "Nested Tables",
                            "tags": [
                                "toml",
                                "table",
                                "nested"
                            ],
                            "language": "toml",
                            "code": "# You can create nested tables (tables within tables) using dot notation in the header.\n\n[server.prod]\nip = \"10.0.0.1\"\ndatacenter = \"us-east-1\"\n\n[server.staging]\nip = \"10.0.0.2\"\ndatacenter = \"us-west-2\"",
                            "output": "{\n  \"server\": {\n    \"prod\": {\n      \"ip\": \"10.0.0.1\",\n      \"datacenter\": \"us-east-1\"\n    },\n    \"staging\": {\n      \"ip\": \"10.0.0.2\",\n      \"datacenter\": \"us-west-2\"\n    }\n  }\n}"
                        }
                    ]
                }
            ]
        }
    },
    {
        "parent_category": "TOML",
        "category": "Advanced TOML",
        "title": "Advanced Tables: Dotted Keys & Inline Tables",
        "description": "How to use dotted keys and inline tables to define nested data structures in a more concise and readable way.",
        "content": {
            "sections": [
                {
                    "section_title": "Dotted Keys",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Defining Nested Tables Concisely",
                            "tags": [
                                "toml",
                                "advanced",
                                "table",
                                "dotted keys",
                                "nested"
                            ],
                            "language": "toml",
                            "code": "# Dotted keys let you define nested tables without using the `[table.subtable]` syntax.\n# This is useful for grouping related properties.\n\n# Instead of:\n# [owner]\n# name = \"Tom\"\n# [owner.address]\n# street = \"123 Main St\"\n\n# You can write:\nowner.name = \"Tom\"\nowner.address.street = \"123 Main St\"",
                            "output": "{\n  \"owner\": {\n    \"name\": \"Tom\",\n    \"address\": {\n      \"street\": \"123 Main St\"\n    }\n  }\n}"
                        }
                    ]
                },
                {
                    "section_title": "Inline Tables",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Compact, Single-Line Tables",
                            "tags": [
                                "toml",
                                "advanced",
                                "table",
                                "inline table"
                            ],
                            "language": "toml",
                            "code": "# Inline tables provide a more compact syntax for tables.\n# They are defined within curly braces `{}` and must be on a single line.\n\n# Instead of:\n# [points.start]\n# x = 1\n# y = 2\n# [points.end]\n# x = 3\n# y = 4\n\n# You can write:\npoints = { start = { x = 1, y = 2 }, end = { x = 3, y = 4 } }",
                            "output": "{\n  \"points\": {\n    \"start\": {\n      \"x\": 1,\n      \"y\": 2\n    },\n    \"end\": {\n      \"x\": 3,\n      \"y\": 4\n    }\n  }\n}"
                        }
                    ]
                }
            ]
        }
    },
    {
        "parent_category": "TOML",
        "category": "Advanced TOML",
        "title": "Arrays of Tables",
        "description": "How to use TOML's `[[array.of.tables]]` syntax to define a list of complex objects. This is a key feature for defining lists of items with multiple properties.",
        "content": {
            "sections": [
                {
                    "section_title": "Defining an Array of Tables",
                    "sub_sections": [
                        {
                            "sub_section_heading": "Basic `[[array.of.tables]]` Syntax",
                            "tags": [
                                "toml",
                                "advanced",
                                "array of tables",
                                "list",
                                "object"
                            ],
                            "language": "toml",
                            "code": "# To create a list of objects (tables), use the double bracket syntax.\n# Each `[[table]]` block defines a new object in the array.\n\n# This is useful for things like dependencies or a list of users.\n\n[[products]]\nname = \"Hammer\"\nsku = 738594937\n\n[[products]]\nname = \"Nail\"\nsku = 284758393\ncolor = \"gray\"",
                            "output": "{\n  \"products\": [\n    { \"name\": \"Hammer\", \"sku\": 738594937 },\n    { \"name\": \"Nail\", \"sku\": 284758393, \"color\": \"gray\" }\n  ]\n}"
                        },
                        {
                            "sub_section_heading": "Nested Arrays of Tables",
                            "tags": [
                                "toml",
                                "advanced",
                                "array of tables",
                                "nested"
                            ],
                            "language": "toml",
                            "code": "# You can also define nested arrays of tables using dot notation.\n\n[[fruits]]\nname = \"apple\"\n\n  [fruits.physical] # A sub-table\n  color = \"red\"\n  shape = \"round\"\n\n  [[fruits.variety]] # A nested array of tables\n  name = \"gala\"\n\n  [[fruits.variety]]\n  name = \"fuji\"\n\n[[fruits]]\nname = \"banana\"",
                            "output": "{\n  \"fruits\": [\n    {\n      \"name\": \"apple\",\n      \"physical\": {\n        \"color\": \"red\",\n        \"shape\": \"round\"\n      },\n      \"variety\": [\n        { \"name\": \"gala\" },\n        { \"name\": \"fuji\" }\n      ]\n    },\n    { \"name\": \"banana\" }\n  ]\n}"
                        }
                    ]
                }
            ]
        }
    }
]
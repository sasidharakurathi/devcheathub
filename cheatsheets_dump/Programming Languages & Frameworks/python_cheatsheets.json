[
  {
    "category": "Python Basics",
    "title": "Hello, World!",
    "description": "The most basic Python program to print 'Hello, World!' to the console.",
    "snippets": [
      {
        "title": "Printing to the console",
        "language": "python",
        "code": "print(\"Hello, World!\")",
        "output": "Hello, World!"
      }
    ]
  },
  {
    "category": "Python Basics",
    "title": "Variables and Data Types",
    "description": "How to declare variables and work with Python's basic data types.",
    "snippets": [
      {
        "title": "Creating variables",
        "language": "python",
        "code": "name = \"Alice\"\nage = 25\nheight = 5.6\nis_student = True",
        "output": null
      },
      {
        "title": "Getting variable type",
        "language": "python",
        "code": "x = 42\nprint(type(x))\ny = \"Hello\"\nprint(type(y))",
        "output": "<class 'int'>\n<class 'str'>"
      },
      {
        "title": "Type casting",
        "language": "python",
        "code": "x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0\nprint(x, y, z)",
        "output": "3 3 3.0"
      }
    ]
  },
  {
    "category": "Python Basics",
    "title": "Basic Arithmetic",
    "description": "Performing mathematical operations and calculations in Python.",
    "snippets": [
      {
        "title": "Basic arithmetic operations",
        "language": "python",
        "code": "print(2 + 2)        # Addition\nprint(50 - 5*6)     # Subtraction and multiplication\nprint(8 / 5)        # Division (returns float)\nprint(17 // 3)      # Floor division\nprint(17 % 3)       # Modulo (remainder)\nprint(5 ** 2)       # Exponentiation",
        "output": "4\n20\n1.6\n5\n2\n25"
      }
    ]
  },
  {
    "category": "Python Basics",
    "title": "Comments",
    "description": "Adding comments to document and explain your Python code.",
    "snippets": [
      {
        "title": "Single line comments",
        "language": "python",
        "code": "# This is a comment\nprint(\"Hello\")  # This is also a comment",
        "output": "Hello"
      },
      {
        "title": "Multi-line comments",
        "language": "python",
        "code": "\"\"\"\nThis is a multi-line comment\nused for documentation\n\"\"\"\nprint(\"Code after comment\")",
        "output": "Code after comment"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "Working with Strings",
    "description": "String manipulation, indexing, slicing, and common string operations.",
    "snippets": [
      {
        "title": "String creation and concatenation",
        "language": "python",
        "code": "name = \"Python\"\ngreeting = 'Hello, ' + name + '!'\nprint(greeting)",
        "output": "Hello, Python!"
      },
      {
        "title": "String indexing and slicing",
        "language": "python",
        "code": "word = \"Python\"\nprint(word[0])     # First character\nprint(word[-1])    # Last character\nprint(word[0:2])   # Slice from 0 to 2\nprint(word[2:])    # Slice from 2 to end",
        "output": "P\nn\nPy\nthon"
      },
      {
        "title": "String methods",
        "language": "python",
        "code": "text = \"  Hello World  \"\nprint(text.upper())\nprint(text.lower())\nprint(text.strip())\nprint(text.replace(\"World\", \"Python\"))",
        "output": "  HELLO WORLD  \n  hello world  \nHello World\n  Hello Python  "
      },
      {
        "title": "F-strings (formatted strings)",
        "language": "python",
        "code": "name = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old\")\nprint(f\"Next year I'll be {age + 1}\")",
        "output": "My name is Alice and I am 30 years old\nNext year I'll be 31"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "Working with Lists",
    "description": "Creating, accessing, and manipulating lists in Python.",
    "snippets": [
      {
        "title": "Creating and accessing lists",
        "language": "python",
        "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])    # First item\nprint(fruits[-1])   # Last item\nprint(len(fruits))  # Length of list",
        "output": "apple\ncherry\n3"
      },
      {
        "title": "List methods",
        "language": "python",
        "code": "numbers = [1, 2, 3]\nnumbers.append(4)        # Add to end\nnumbers.insert(0, 0)     # Insert at index\nnumbers.remove(2)        # Remove by value\nprint(numbers)",
        "output": "[0, 1, 3, 4]"
      },
      {
        "title": "List slicing and concatenation",
        "language": "python",
        "code": "numbers = [1, 2, 3, 4, 5]\nprint(numbers[1:4])      # Slice\nprint(numbers + [6, 7])  # Concatenation\nprint(numbers * 2)       # Repetition",
        "output": "[2, 3, 4]\n[1, 2, 3, 4, 5, 6, 7]\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "List Comprehensions",
    "description": "Creating lists using concise and readable comprehension syntax.",
    "snippets": [
      {
        "title": "Basic list comprehension",
        "language": "python",
        "code": "squares = [x**2 for x in range(5)]\nprint(squares)\neven_numbers = [x for x in range(10) if x % 2 == 0]\nprint(even_numbers)",
        "output": "[0, 1, 4, 9, 16]\n[0, 2, 4, 6, 8]"
      },
      {
        "title": "Complex list comprehension",
        "language": "python",
        "code": "words = ['hello', 'world', 'python']\nupper_words = [word.upper() for word in words]\nprint(upper_words)\nfiltered = [word for word in words if len(word) > 5]\nprint(filtered)",
        "output": "['HELLO', 'WORLD', 'PYTHON']\n['python']"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "Working with Tuples",
    "description": "Creating and using immutable sequences in Python.",
    "snippets": [
      {
        "title": "Creating and accessing tuples",
        "language": "python",
        "code": "coordinates = (3, 5)\nprint(coordinates[0])     # First element\nprint(coordinates[1])     # Second element\nprint(len(coordinates))   # Length",
        "output": "3\n5\n2"
      },
      {
        "title": "Tuple unpacking",
        "language": "python",
        "code": "point = (10, 20)\nx, y = point             # Unpacking\nprint(f\"x: {x}, y: {y}\")\n\n# Multiple assignment\na, b = 1, 2\nprint(f\"a: {a}, b: {b}\")",
        "output": "x: 10, y: 20\na: 1, b: 2"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "Working with Dictionaries",
    "description": "Creating and manipulating key-value pairs in Python dictionaries.",
    "snippets": [
      {
        "title": "Creating and accessing dictionaries",
        "language": "python",
        "code": "person = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nprint(person[\"name\"])        # Access by key\nprint(person.get(\"age\"))     # Safe access\nprint(len(person))           # Number of key-value pairs",
        "output": "Alice\n30\n3"
      },
      {
        "title": "Dictionary methods",
        "language": "python",
        "code": "person = {\"name\": \"Bob\", \"age\": 25}\nperson[\"email\"] = \"bob@email.com\"  # Add new key\ndel person[\"age\"]                   # Remove key\nprint(person.keys())                # Get all keys\nprint(person.values())              # Get all values\nprint(person.items())               # Get key-value pairs",
        "output": "dict_keys(['name', 'email'])\ndict_values(['Bob', 'bob@email.com'])\ndict_items([('name', 'Bob'), ('email', 'bob@email.com')])"
      }
    ]
  },
  {
    "category": "Data Structures",
    "title": "Working with Sets",
    "description": "Creating and using unordered collections of unique elements.",
    "snippets": [
      {
        "title": "Creating sets and set operations",
        "language": "python",
        "code": "fruits = {\"apple\", \"banana\", \"cherry\"}\nprint(fruits)\nfruits.add(\"orange\")     # Add element\nfruits.remove(\"banana\")  # Remove element\nprint(fruits)",
        "output": "{'apple', 'banana', 'cherry'}\n{'apple', 'cherry', 'orange'}"
      },
      {
        "title": "Set operations",
        "language": "python",
        "code": "set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nprint(set1 | set2)  # Union\nprint(set1 & set2)  # Intersection\nprint(set1 - set2)  # Difference",
        "output": "{1, 2, 3, 4, 5, 6}\n{3, 4}\n{1, 2}"
      }
    ]
  },
  {
    "category": "Control Flow",
    "title": "Conditional Statements",
    "description": "Using if, elif, and else statements to control program flow.",
    "snippets": [
      {
        "title": "Basic if-else statement",
        "language": "python",
        "code": "age = 18\nif age >= 18:\n    print(\"You are an adult\")\nelse:\n    print(\"You are a minor\")",
        "output": "You are an adult"
      },
      {
        "title": "Multiple conditions with elif",
        "language": "python",
        "code": "score = 85\nif score >= 90:\n    print(\"Grade: A\")\nelif score >= 80:\n    print(\"Grade: B\")\nelif score >= 70:\n    print(\"Grade: C\")\nelse:\n    print(\"Grade: F\")",
        "output": "Grade: B"
      },
      {
        "title": "Logical operators",
        "language": "python",
        "code": "age = 25\nincome = 50000\nif age >= 18 and income > 30000:\n    print(\"Eligible for loan\")\nelif age >= 18 or income > 100000:\n    print(\"May be eligible\")\nelse:\n    print(\"Not eligible\")",
        "output": "Eligible for loan"
      }
    ]
  },
  {
    "category": "Control Flow",
    "title": "For Loops",
    "description": "Iterating over sequences and ranges using for loops.",
    "snippets": [
      {
        "title": "Basic for loop",
        "language": "python",
        "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(f\"I like {fruit}\")",
        "output": "I like apple\nI like banana\nI like cherry"
      },
      {
        "title": "Using range function",
        "language": "python",
        "code": "for i in range(5):\n    print(f\"Number: {i}\")\n\nfor i in range(2, 8, 2):  # start, stop, step\n    print(f\"Even: {i}\")",
        "output": "Number: 0\nNumber: 1\nNumber: 2\nNumber: 3\nNumber: 4\nEven: 2\nEven: 4\nEven: 6"
      },
      {
        "title": "Enumerate and zip",
        "language": "python",
        "code": "fruits = [\"apple\", \"banana\"]\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n\ncolors = [\"red\", \"yellow\"]\nfor fruit, color in zip(fruits, colors):\n    print(f\"{fruit} is {color}\")",
        "output": "0: apple\n1: banana\napple is red\nbanana is yellow"
      }
    ]
  },
  {
    "category": "Control Flow",
    "title": "While Loops",
    "description": "Repeating code execution while a condition is true.",
    "snippets": [
      {
        "title": "Basic while loop",
        "language": "python",
        "code": "count = 0\nwhile count < 3:\n    print(f\"Count: {count}\")\n    count += 1\nprint(\"Loop finished\")",
        "output": "Count: 0\nCount: 1\nCount: 2\nLoop finished"
      },
      {
        "title": "Break and continue",
        "language": "python",
        "code": "for i in range(10):\n    if i == 3:\n        continue  # Skip this iteration\n    if i == 7:\n        break     # Exit the loop\n    print(i)",
        "output": "0\n1\n2\n4\n5\n6"
      }
    ]
  },
  {
    "category": "Functions",
    "title": "Defining Functions",
    "description": "Creating reusable blocks of code with functions.",
    "snippets": [
      {
        "title": "Basic function definition",
        "language": "python",
        "code": "def greet(name):\n    return f\"Hello, {name}!\"\n\nresult = greet(\"Alice\")\nprint(result)",
        "output": "Hello, Alice!"
      },
      {
        "title": "Function with default parameters",
        "language": "python",
        "code": "def greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\nprint(greet(\"Bob\"))\nprint(greet(\"Charlie\", \"Hi\"))",
        "output": "Hello, Bob!\nHi, Charlie!"
      },
      {
        "title": "Multiple return values",
        "language": "python",
        "code": "def calculate(a, b):\n    return a + b, a - b, a * b\n\nsum_val, diff, product = calculate(10, 3)\nprint(f\"Sum: {sum_val}, Diff: {diff}, Product: {product}\")",
        "output": "Sum: 13, Diff: 7, Product: 30"
      }
    ]
  },
  {
    "category": "Functions",
    "title": "Advanced Function Features",
    "description": "Working with *args, **kwargs, and lambda functions.",
    "snippets": [
      {
        "title": "*args and **kwargs",
        "language": "python",
        "code": "def flexible_function(*args, **kwargs):\n    print(f\"Args: {args}\")\n    print(f\"Kwargs: {kwargs}\")\n\nflexible_function(1, 2, 3, name=\"Alice\", age=30)",
        "output": "Args: (1, 2, 3)\nKwargs: {'name': 'Alice', 'age': 30}"
      },
      {
        "title": "Lambda functions",
        "language": "python",
        "code": "# Lambda function\nsquare = lambda x: x**2\nprint(square(5))\n\n# Using lambda with map\nnumbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x**2, numbers))\nprint(squared)",
        "output": "25\n[1, 4, 9, 16]"
      }
    ]
  },
  {
    "category": "Error Handling",
    "title": "Exception Handling",
    "description": "Handling errors gracefully using try, except, else, and finally.",
    "snippets": [
      {
        "title": "Basic try-except",
        "language": "python",
        "code": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nprint(\"Program continues...\")",
        "output": "Cannot divide by zero!\nProgram continues..."
      },
      {
        "title": "Multiple exception handling",
        "language": "python",
        "code": "try:\n    value = int(input(\"Enter a number: \"))\n    result = 10 / value\nexcept ValueError:\n    print(\"Invalid input! Please enter a number.\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nelse:\n    print(f\"Result: {result}\")\nfinally:\n    print(\"Execution completed.\")",
        "output": null
      },
      {
        "title": "Raising custom exceptions",
        "language": "python",
        "code": "def validate_age(age):\n    if age < 0:\n        raise ValueError(\"Age cannot be negative\")\n    if age > 150:\n        raise ValueError(\"Age seems unrealistic\")\n    return True\n\ntry:\n    validate_age(-5)\nexcept ValueError as e:\n    print(f\"Error: {e}\")",
        "output": "Error: Age cannot be negative"
      }
    ]
  },
  {
    "category": "File I/O",
    "title": "Reading and Writing Files",
    "description": "Working with files to read and write data.",
    "snippets": [
      {
        "title": "Reading from files",
        "language": "python",
        "code": "# Reading entire file\nwith open('sample.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n# Reading line by line\nwith open('sample.txt', 'r') as file:\n    for line in file:\n        print(line.strip())",
        "output": null
      },
      {
        "title": "Writing to files",
        "language": "python",
        "code": "# Writing to a file\nwith open('output.txt', 'w') as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"This is a new line.\")\n\n# Appending to a file\nwith open('output.txt', 'a') as file:\n    file.write(\"\\nThis line is appended.\")",
        "output": null
      }
    ]
  },
  {
    "category": "Object-Oriented Programming",
    "title": "Classes and Objects",
    "description": "Creating classes and objects in Python.",
    "snippets": [
      {
        "title": "Basic class definition",
        "language": "python",
        "code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def introduce(self):\n        return f\"Hi, I'm {self.name} and I'm {self.age} years old\"\n\nperson = Person(\"Alice\", 30)\nprint(person.introduce())",
        "output": "Hi, I'm Alice and I'm 30 years old"
      },
      {
        "title": "Class with methods and properties",
        "language": "python",
        "code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    @property\n    def area(self):\n        return 3.14159 * self.radius ** 2\n    \n    def circumference(self):\n        return 2 * 3.14159 * self.radius\n\ncircle = Circle(5)\nprint(f\"Area: {circle.area:.2f}\")\nprint(f\"Circumference: {circle.circumference():.2f}\")",
        "output": "Area: 78.54\nCircumference: 31.42"
      }
    ]
  },
  {
    "category": "Object-Oriented Programming",
    "title": "Inheritance",
    "description": "Creating classes that inherit from other classes.",
    "snippets": [
      {
        "title": "Basic inheritance",
        "language": "python",
        "code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return f\"{self.name} says Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return f\"{self.name} says Meow!\"\n\ndog = Dog(\"Buddy\")\ncat = Cat(\"Whiskers\")\nprint(dog.speak())\nprint(cat.speak())",
        "output": "Buddy says Woof!\nWhiskers says Meow!"
      }
    ]
  },
  {
    "category": "Python Libraries",
    "title": "Working with datetime",
    "description": "Handling dates and times in Python.",
    "snippets": [
      {
        "title": "Current date and time",
        "language": "python",
        "code": "from datetime import datetime, date, time\n\nnow = datetime.now()\ntoday = date.today()\nprint(f\"Current datetime: {now}\")\nprint(f\"Today's date: {today}\")\nprint(f\"Formatted: {now.strftime('%Y-%m-%d %H:%M:%S')}\")",
        "output": null
      },
      {
        "title": "Date calculations",
        "language": "python",
        "code": "from datetime import datetime, timedelta\n\ntoday = datetime.now()\ntomorrow = today + timedelta(days=1)\nlast_week = today - timedelta(weeks=1)\n\nprint(f\"Today: {today.strftime('%Y-%m-%d')}\")\nprint(f\"Tomorrow: {tomorrow.strftime('%Y-%m-%d')}\")\nprint(f\"Last week: {last_week.strftime('%Y-%m-%d')}\")",
        "output": null
      }
    ]
  },
  {
    "category": "Python Libraries",
    "title": "Working with random",
    "description": "Generating random numbers and making random choices.",
    "snippets": [
      {
        "title": "Random numbers and choices",
        "language": "python",
        "code": "import random\n\n# Random integer\nprint(random.randint(1, 10))\n\n# Random float\nprint(random.random())\n\n# Random choice from list\ncolors = ['red', 'blue', 'green', 'yellow']\nprint(random.choice(colors))\n\n# Shuffle a list\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)",
        "output": null
      }
    ]
  },
  {
    "category": "Python Libraries",
    "title": "Working with json",
    "description": "Parsing and generating JSON data.",
    "snippets": [
      {
        "title": "JSON encoding and decoding",
        "language": "python",
        "code": "import json\n\n# Python dict to JSON string\ndata = {'name': 'Alice', 'age': 30, 'city': 'New York'}\njson_string = json.dumps(data)\nprint(json_string)\n\n# JSON string to Python dict\nparsed_data = json.loads(json_string)\nprint(parsed_data['name'])",
        "output": "{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nAlice"
      }
    ]
  },
  {
    "category": "Advanced Topics",
    "title": "Decorators",
    "description": "Using decorators to modify or enhance functions.",
    "snippets": [
      {
        "title": "Simple decorator",
        "language": "python",
        "code": "def my_decorator(func):\n    def wrapper():\n        print(\"Before function call\")\n        func()\n        print(\"After function call\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()",
        "output": "Before function call\nHello!\nAfter function call"
      }
    ]
  },
  {
    "category": "Advanced Topics",
    "title": "Context Managers",
    "description": "Using context managers for resource management.",
    "snippets": [
      {
        "title": "Using with statement",
        "language": "python",
        "code": "# File handling with context manager\nwith open('example.txt', 'w') as f:\n    f.write('Hello, World!')\n# File is automatically closed here\n\n# Custom context manager\nclass MyContext:\n    def __enter__(self):\n        print(\"Entering context\")\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Exiting context\")\n\nwith MyContext():\n    print(\"Inside context\")",
        "output": "Entering context\nInside context\nExiting context"
      }
    ]
  },
  {
    "category": "Advanced Topics",
    "title": "Generators",
    "description": "Creating memory-efficient iterators using generators.",
    "snippets": [
      {
        "title": "Generator function",
        "language": "python",
        "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# Using the generator\nfor num in fibonacci(5):\n    print(num)",
        "output": "0\n1\n1\n2\n3"
      },
      {
        "title": "Generator expression",
        "language": "python",
        "code": "# Generator expression\nsquares = (x**2 for x in range(5))\nprint(list(squares))\n\n# Memory efficient processing\neven_squares = (x**2 for x in range(1000000) if x % 2 == 0)\nprint(next(even_squares))  # Get first value\nprint(next(even_squares))  # Get second value",
        "output": "[0, 1, 4, 9, 16]\n0\n4"
      }
    ]
  }
]